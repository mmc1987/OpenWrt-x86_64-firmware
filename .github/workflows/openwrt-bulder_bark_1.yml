#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder Bark1

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: main
  # REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_REPOSITORY_URL: https://github.com/${{ github.repository }}
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_ACTOR: ${{ github.actor }}
  GITHUB_WORKFLOW: ${{ github.workflow }}

jobs:
  build:
    # runs-on: ubuntu-22.04
    runs-on: ubuntu-latest

    steps:
    - name: Record start time
      id: start-time
      run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV
    
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        # 更新软件源
        sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
        sudo tee /etc/apt/sources.list > /dev/null <<EOL
        deb http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
        deb http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
        deb http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
        deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
        EOL
        
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
        libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
        libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
        python3-pip python3-ply python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools \
        subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make defconfig
        make download -j8
        echo "Debug: Starting compilation..."
        make -j$(nproc) V=s || make -j1 V=s
        echo "Debug: Compilation finished"
        echo "Debug: Checking build output..."
        if [ -d bin/targets ]; then
          echo "Build output exists:"
          ls -la bin/targets
        else
          echo "Error: Build output directory not found"
          echo "Current directory structure:"
          ls -la
          exit 1
        fi
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        echo "Debug: Checking directory structure..."
        ls -la openwrt/bin || echo "bin directory does not exist"
        if [ -d openwrt/bin/targets ]; then
          echo "Debug: targets directory exists"
          ls -la openwrt/bin/targets
          cd openwrt/bin/targets
          for d in *; do
            if [ -d "$d" ]; then
              echo "Debug: Found architecture directory: $d"
              ls -la "$d"
            fi
          done
          TARGET_DIR=$(ls -d openwrt/bin/targets/*/* 2>/dev/null | head -n 1)
          if [ -n "$TARGET_DIR" ]; then
            cd "$TARGET_DIR"
            rm -rf packages
            echo "FIRMWARE=$PWD" >> $GITHUB_ENV
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "Error: No target directory found"
            exit 1
          fi
        else
          echo "Error: Directory openwrt/bin/targets does not exist"
          echo "Debug: Current directory structure:"
          pwd
          ls -la
          exit 1
        fi

    - name: Package firmware
      id: package-firmware
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        cd ${{ env.FIRMWARE }}
        zip -r firmware.zip *

    - name: Upload firmware
      uses: actions/upload-artifact@main
      if: steps.package-firmware.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}/firmware.zip

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo " [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/firmware.zip

    - name: Refresh Release API
      if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        mkdir -p Github_Api
        cd Github_Api
        TAG="${{ steps.tag.outputs.release_tag }}"
        TAG_ENCODED=$(echo "$TAG" | sed 's/ /%20/g')
        curl -H "Authorization: Bearer ${{ secrets.ACTIONS_TRIGGER_PAT }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_ENCODED" -o Github_Tags
        if [[ $? -ne 0 ]]; then
            wget -q --no-cookie --no-check-certificate "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_ENCODED" -O Github_Tags
        fi

    - name: Upload API to Github Release
      uses: svenstaro/upload-release-action@master
      if: always()
      with:
        repo_token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        file: "Github_Api/*"
        file_glob: true
        tag: ${{ steps.tag.outputs.release_tag }}
        overwrite: true

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}

    - name: Record end time
      id: end-time
      run: echo "END_TIME=$(date +%s)" >> $GITHUB_ENV


    - name: Send Bark Notification
      if: always()  # Ensure this step always runs, regardless of the success or failure of previous steps
      run: |
        urlencode() {
        local raw_url="$1"
        local encoded_url
        # 使用 jq 工具进行正确的 URL 编码
        encoded_url=$(printf '%s' "$raw_url" | jq -sRr @uri)
        echo "$encoded_url"
        }
      
        START_TIME=${{ env.START_TIME }}
        END_TIME=${{ env.END_TIME }}
        ELAPSED_TIME=$((END_TIME - START_TIME))
        
        DATE=$(date +"%Y%m%d%H%M")
        
        if [[ "${{ steps.compile.outputs.status }}" == "success" ]]; then
          MESSAGE="构建完成%0a日期:$DATE%0a分支:$REPO_BRANCH%0a耗时:$ELAPSED_TIME"
          curl -s "https://api.day.app/J5xsjQ9PMoSgzaUwymg4yj/编译完成/$MESSAGE"
        else
          MESSAGE="构建失败%0a日期:$DATE"
          curl -s "https://api.day.app/J5xsjQ9PMoSgzaUwymg4yj/编译失败/$MESSAGE"
        fi
