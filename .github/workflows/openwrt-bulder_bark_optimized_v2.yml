# 
# OpenWrt Builder Workflow with Enhanced Release Features
# Based on P3TERX's work: https://github.com/P3TERX/Actions-OpenWrt
#

name: OpenWrt Builder Enhanced

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      release_type:
        description: 'Release type (stable/beta)'
        required: false
        default: 'stable'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Record Build Info
      id: build-info
      run: |
        echo "START_TIME=$(date +%s)" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        echo "BUILD_TIME=$(date +"%H%M")" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/openwrt/openwrt/master/scripts/ubuntu-prerequisites)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -h

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "END_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Check space usage
      if: always()
      run: df -hT

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        release_tag="${{ env.BUILD_DATE }}-${{ env.BUILD_TIME }}"
        if [[ "${{ github.event.inputs.release_type }}" == "beta" ]]; then
          release_tag="beta-${release_tag}"
        fi
        echo "release_tag=${release_tag}" >> $GITHUB_OUTPUT
        
        # Generate release notes
        {
          echo "### OpenWrt Firmware Build"
          echo "üìÖ Build Date: ${{ env.BUILD_DATE }}"
          echo "‚è∞ Build Time: ${{ env.BUILD_TIME }}"
          echo "üî® Build Type: ${{ github.event.inputs.release_type || 'stable' }}"
          echo ""
          echo "### Build Information"
          echo "- Device: $(cat openwrt/DEVICE_NAME)"
          echo "- Branch: ${{ env.REPO_BRANCH }}"
          echo "- Commit Info:"
          echo "${{ env.useVersionInfo }}"
          echo ""
          echo "### Build Duration"
          echo "‚è±Ô∏è Total time: $(( ${{ env.END_TIME }} - ${{ env.START_TIME }} )) seconds"
          echo ""
          echo "### SHA256 Checksums"
          echo "\`\`\`"
          sha256sum * > sha256sums
          cat sha256sums
          echo "\`\`\`"
        } > release.txt

        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        draft: false
        prerelease: ${{ github.event.inputs.release_type == 'beta' }}
        generate_release_notes: true

    - name: Refresh Release API
      if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        mkdir -p Github_Api
        cd Github_Api
        TAG="${{ steps.tag.outputs.release_tag }}"
        TAG_ENCODED=$(echo "$TAG" | sed 's/ /%20/g')
        curl -H "Authorization: Bearer ${{ secrets.ACTIONS_TRIGGER_PAT }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_ENCODED" -o Github_Tags
        if [[ $? -ne 0 ]]; then
            wget -q --no-cookie --no-check-certificate "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_ENCODED" -O Github_Tags
        fi

    - name: Upload API to Github Release
      uses: svenstaro/upload-release-action@master
      if: always()
      with:
        repo_token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        file: "Github_Api/*"
        file_glob: true
        tag: ${{ steps.tag.outputs.release_tag }}
        overwrite: true

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}

    - name: Send Bark Notification
      if: always()
      run: |
        urlencode() {
          local raw_url="$1"
          local encoded_url
          encoded_url=$(printf '%s' "$raw_url" | jq -sRr @uri)
          echo "$encoded_url"
        }
        
        START_TIME=${{ env.START_TIME }}
        END_TIME=${{ env.END_TIME }}
        ELAPSED_TIME=$((END_TIME - START_TIME))
        DATE=$(date +"%Y%m%d%H%M")
        
        if [[ "${{ steps.compile.outputs.status }}" == "success" ]]; then
          MESSAGE="ÊûÑÂª∫ÂÆåÊàê%0aÊó•Êúü:$DATE%0aÂàÜÊîØ:$REPO_BRANCH%0aËÄóÊó∂:${ELAPSED_TIME}Áßí"
          ENCODED_MESSAGE=$(urlencode "$MESSAGE")
          curl -s "https://api.day.app/${{ secrets.BARK_KEY }}/ÁºñËØëÂÆåÊàê/$ENCODED_MESSAGE?group=OpenWrt"
        else
          MESSAGE="ÊûÑÂª∫Â§±Ë¥•%0aÊó•Êúü:$DATE%0aËÄóÊó∂:${ELAPSED_TIME}Áßí"
          ENCODED_MESSAGE=$(urlencode "$MESSAGE")
          curl -s "https://api.day.app/${{ secrets.BARK_KEY }}/ÁºñËØëÂ§±Ë¥•/$ENCODED_MESSAGE?group=OpenWrt"
        fi

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3
